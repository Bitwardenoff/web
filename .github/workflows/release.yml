---
name: Release

on:
  workflow_dispatch:
    inputs: {}

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-20.04
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_version: ${{ steps.create_tags.outputs.package }}
      tag_version: ${{ steps.create_tags.outputs.tag }}
    steps:
      - name: Branch check
        run: |
          if [[ "$GITHUB_REF" != "refs/heads/rc" ]]; then
            echo "==================================="
            echo "[!] Can only release from rc branch"
            echo "==================================="
            exit 1
          fi

      - name: Checkout repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f  # 2.3.4

      - name: Check Release Version
        id: version
        run: |
          version=$( jq -r ".version" package.json)
          previous_release_tag_version=$(
            curl -sL https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | jq -r ".tag_name"
          )

          if [ "v$version" == "$previous_release_tag_version" ]; then
            echo "[!] Already released v$version. Please bump version to continue"
            exit 1
          fi

          echo "::set-output name=package::$version"
          echo "::set-output name=tag::v$version"

      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e  # 1.1.4 - Repo Archived
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Version ${{ steps.version.outputs.package }}
          draft: true
          prerelease: false


  self-host:
    name: Build self-host docker
    runs-on: ubuntu-20.04
    needs: setup
    env:
      _RELEASE_VERSION: ${{ needs.setup.outputs.release_version }}
    steps:
      - name: Print environment
        run: |
          whoami
          docker --version
          echo "GitHub ref: $GITHUB_REF"
          echo "GitHub event: $GITHUB_EVENT"

      - name: Login to Azure
        uses: Azure/login@77f1b2e3fb80c0e8645114159d17008b8a2e475a
        with:
          creds: ${{ secrets.AZURE_PROD_KV_CREDENTIALS }}

      - name: Retrieve secrets
        id: get-secrets
        uses: Azure/get-keyvault-secrets@80ccd3fafe5662407cc2e55f202ee34bfff8c403
        with:
          keyvault: "bitwarden-prod-kv"
          secrets: "docker-password,
                    docker-username,
                    dct-delegate-2-repo-passphrase,
                    dct-delegate-2-key"

      - name: Log into Docker
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        env:
          DOCKER_USERNAME: ${{ steps.get-secrets.outputs.docker-username }}
          DOCKER_PASSWORD: ${{ steps.get-secrets.outputs.docker-password }}

      - name: Setup Docker Trust
        run: |
          mkdir -p ~/.docker/trust/private

          echo "$DCT_DELEGATE_KEY" > ~/.docker/trust/private/$DCT_DELEGATION_KEY_ID.key
        env:
          DCT_DELEGATION_KEY_ID: "c9bde8ec820701516491e5e03d3a6354e7bd66d05fa3df2b0062f68b116dc59c"
          DCT_DELEGATE_KEY: ${{ steps.get-secrets.outputs.dct-delegate-2-key }}

      - name: Checkout repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Pull latest selfhost rc image
        run: docker pull bitwarden/web:rc

      - name: Tag version
        run: |
          docker tag bitwarden/web:rc bitwarden/web:latest
          docker tag bitwarden/web:rc bitwarden/web:$_RELEASE_VERSION

      - name: List Docker images
        run: docker images

      - name: Push images
        run: |
          docker push bitwarden/web:latest
          docker push bitwarden/web:$_RELEASE_VERSION
        env:
          DOCKER_CONTENT_TRUST: 1
          DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: ${{ steps.get-secrets.outputs.dct-delegate-2-repo-passphrase }}

      - name: Log out of Docker
        run: docker logout
