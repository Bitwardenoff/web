---
name: Deploy

on:
  workflow_dispatch:
    inputs: {}
  release:
    types:
      - published


jobs:
  setup:
    name: Setup
    runs-on: ubuntu-20.04
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_version: ${{ steps.create_tags.outputs.package }}
      tag_version: ${{ steps.create_tags.outputs.tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f  # 2.3.4
        with:
          ref: rc

      - name: Check Release Version
        id: version
        run: |
          version=$( jq -r ".version" package.json)
          previous_release_tag_version=$(
            curl -sL https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | jq -r ".tag_name"
          )

          if [ "v$version" == "$previous_release_tag_version" ]; then
            echo "[!] Already released v$version. Please bump version to continue"
            exit 1
          fi

          echo "::set-output name=package::$version"
          echo "::set-output name=tag::v$version"


  deploy:
    name: Deploy Web Vault
    runs-on: ubuntu-20.04
    env:
      _RELEASE_VERSION: ${{ needs.setup.outputs.release_version }}
      _TAG_VERSION: ${{ needs.setup.outputs.tag_version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f  # v2.3.4
        with:
          ref: gh-pages

      - name: Check Release Version
        id: version
        run: |
          version=$( jq -r ".version" package.json)
          latest_release_tag_version=$(
            curl -sL https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | jq -r ".tag_name"
          )

          if [ "v$version" != "$latest_release_tag_version" ]; then
            echo "[!] v$version hasn't been released yet. Please release it before deploying"
            exit 1
          fi

          echo "::set-output name=package::$version"
          echo "::set-output name=tag::v$version"

      - name: Create deploy branch
        run: |
          git switch -c deploy-$_TAG_VERSION
          git push -u origin deploy-$_TAG_VERSION
          git switch rc

      - name: Setup git config
        run: |
          git config user.name = "GitHub Action Bot"
          git config user.email = "<>"
          git config --global url."https://github.com/".insteadOf ssh://git@github.com/
          git config --global url."https://".insteadOf ssh://

      - name: Download latest RC Production build
        uses: dawidd6/action-download-artifact@b9571484721e8187f1fd08147b497129f8972c74 # v2.14.0
        with:
          workflow: build.yml
          workflow_conclusion: success
          branch: rc
          name: prod-build-artifact.zip

      # This should result in a build directory in the current working directory
      - name: Unzip build asset
        run: unzip prod-build-artifact.zip 

      - name: Deploy GitHub Pages
        uses: crazy-max/ghaction-github-pages@db4476a01402e1a7ce05f41832040eef16d14925  # v2.5.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target_branch: deploy-${{ steps.release-version.outputs.version }}
          build_dir: build
          keep_history: true
          commit_message: "Staging deploy ${{ steps.release-version.outputs.version }}"

      - name: Create Deploy PR
        env:
          PR_BRANCH: deploy-${{ env._TAG_VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create --title "Deploy $_RELEASE_VERSION" --body "Deploying $_RELEASE_VERSION" --base gh-pages --head "$PR_BRANCH"
